//FUNCIONESSSSSSSSSSSSSSSS

struct StructArr {
    int datos;
}






void main(){
//Declaracion de variables

/*
printf(15>10);

printf(1+3+4+5);

//Instruccion IF
if(3>=4){
    printf("hi");
    int a;
}else if(3+3-(5*4) != 0){
    printf("adios");
}else if(true){
    printf("hi");
}else{
    printf("hi");
    int i = 2;
}

//Instruccion while

while(3+3>0){
    printf("hi");
}

//Instruccion FOR
for(int a = 1; 3>=1; x++){
    printf("hi");
}

//vector con valores
vector<int> vec1 = [10,20,30,40,50];
//vector vacío
vector<float> vec2;

//int a = 3>3;
//inserta 1 al principio
vec1.push_front(1); // [1,10,20,30,40,50 ]

//inserta 100 al final
vec2.push_back(100); //[1,10,20,30,40,50,100]

//inserciones en vacíos
vec2.push_front(1.0); // [1.0]
vec3.push_back("cadena"); // {"cadena"}



    //elimina la primera posición
    vec1.remove(0); //[10,20,30,40,50,100]

    float media1 =5; // la función mean nos retorna 19
    int mediana1 = median(vec1); // la función median nos retorna 1

    //Instruccion while
    while(3+3>0){
int moda1 = mode(vec1); // la función median nos retorna 16
printf("hi");

 }

adios(1,2,3);
hola();
hola();
*/
int a = 1;
struct StructArr num ={14};
printf(iota(num.datos));
vector <int> a = [5,56,7,8];
int x = a[0];
printf(iota(x)); // 7

}



/* intercambio */
void intercambiar(vector<int> a, int i, int j)
{
    int aux = a[i];
    a[i] = a[j];
    a[j] = aux;
}

/* algoritmo de intercambio */
void ordIntercambio(vector<int> arr)
{
    int i = 0;
    int j = 0;

    while (i < (arr.size() - 1))
        {
        j = i + 1;
        while (j < arr.size())
                {
            if (arr[i] > arr[j])
                        {
                intercambiar(arr, i, j);
            }
            j = j + 1;
        }
        i = i + 1;
    }
}

/* algoritmo de seleccion */
void ordSeleccion(vector<int> arr)
{
    int indiceMenor = 0;
    int i = 0;
    int j = 0;
    int n = arr.size();

    while (i < (n - 1))
        {
        /* comienzo de exploracion indice i */
        indiceMenor = i;
        /* j explora la sublista */
        j = i + 1;
        while (j < n)
                {
            if (arr[j] < arr[indiceMenor])
                        {
                indiceMenor = j;
            }
            j = j + 1;
        }

        if (i != indiceMenor)
                {
            intercambiar(arr, i, indiceMenor);
        }

        i = i + 1;
    }
}

/* algoritmo insercion */
void ordInsercion(vector<int> arr)
{
    int i = 0;
    int j = 0;
    int aux = 0;

    i = 1;
    while (i < arr.size())
        {
        j = i;
        aux = arr[i];

        while (j > 0 && aux < arr[j-1])
                {
            arr[j] = arr[j - 1];
            j = j - 1;
        }

        arr[j] = aux;
        i = i + 1;
    }
}

void printArray(string msg, vector<int> arr)
{
        string out = "[";

        for(int i = 0; i < arr.size(); i++)
        {
            out = out + iota(arr[i]);
            if(i != arr.size()-1)
                {
                        out = out + ", ";
                }
        }
        out = out + "]";
        printf(msg, out);
}

void main () {
    /*
        Ordenamiento de intercambio
        entrada: [8, 4, 6, 2]
        salida: [2, 4, 6, 8]
    */
        vector<int> arr1 = [8, 4, 6, 2];
        printArray("entrada: ", arr1);
    ordIntercambio(arr1);
    printArray("salida: ", arr1);

    /*
        Ordenamiento de seleccion
        entrada: [40, 21, 1, 3, 14, 4];
        salida: [1, 3, 4, 14, 21, 40]
    */
    vector<int> arr2 = [40, 21, 1, 3, 14, 4];
        printArray("entrada: ", arr2);
    ordSeleccion(arr2);
    printArray("salida: ", arr2);

    /*
        Ordenamiento de insercion
        entrada: [90, 3, 40, 10, 8, 5];
        salida: [3, 5, 8, 10, 40, 90]
    */
    vector<int> arr3 = [90, 3, 40, 10, 8, 5];
        printArray("entrada: ", arr3);
    ordInsercion(arr3);
    printArray("salida: ", arr3);
}


//asdasd
//asdas/das



void main(){
int altura = 5;
int ancho = altura * 2 - 1;
string out = "";
int i = 0;
while (i < altura) {
    int j = 0;
    while (j < ancho) {
        if (j >= altura  && j <= altura ) {
            out = out + "*";
        } else {
            out = out+ " ";
        }
        j++;
    }

    i++;
}
printf(out);
}

void main(){
vector<int> arr = [90, 3, 40, 10, 8, 5];

int i = 0;
int j = 0;
int aux = 0;

i = 1;
while (i < arr.size())
    {
    printf("1");
    j = i;
    aux = arr[i];

    while (j > 0 && aux < arr[j-1])
    {
        printf("2");
        arr[j] = arr[j - 1];
        j = j - 1;
    }

    arr[j] = aux;
    i = i + 1;
}

}
void main(){
vector<int> arr = [90, 3, 40, 10, 8, 5];

int i = 0;
int j = 0;
int aux = 0;

i = 1;
j = 4;
while (i < 6 && j >3)
    {
    i++;
    j++;
    printf("si");
        if(j == 7){j = 0; printf("aca");}
}

}


